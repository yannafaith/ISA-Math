{"version":3,"sources":["components/ISATerms.js","components/ExpectedIncome.js","components/TaxesInfo.js","components/ISAPayback.js","App.js","index.js"],"names":["SContainer","styled","div","_templateObject","ISATerms","props","react_default","a","createElement","isaTermLength","thousandsSeparator","isaCap","isaPercentage","minimumSalary","projectedSalary","Math","ceil","onClick","changeTerms","ExpectedIncome","totalTaxAmount","round","fedTaxes","FICATax","yearlyIsaPayment","TaxesInfo","state","console","log","stateTaxBrackets","Taxee","income_tax_brackets","fedTaxBrackets","federal","tax_withholding_percentage_method_tables","annual","single","deductions","deduction_amount","stateTaxes1","bracket","marginal_rate","stateTaxes2","stateTaxes3","stateTaxes4","stateTaxes","fedTaxes1","fedTaxes2","fedTaxes3","fedTaxes4","effectiveStateTaxRate","effectiveFedTaxRate","roundedState","roundedFed","ISAPayback","monthlyPayment","totalPayment","paymentMonths","App_templateObject","SHeaderCenter","h2","_templateObject2","App","currentState","projSalary","prompt","newState","newPerc","newCap","newTermLen","_this","setState","num","num_parts","toString","split","replace","join","yearlyPayment","this","App_SContainer","ISATerms_ISATerms","components_ISAPayback","components_TaxesInfo","components_ExpectedIncome","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.bfb7fdec.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const SContainer = styled.div`{\n    background-color: white;\n        h3 {\n            background-color: white;\n        }\n        button {\n            background-color: white;\n        }\n}`;\n\nexport const ISATerms = props => {\n    return(\n        <SContainer>\n            <h3>ISA Terms </h3>\n            ISA Length: {props.isaTermLength} months <br/>\n            ISA Cap: ${props.thousandsSeparator(props.isaCap)} <br/>\n            ISA Percentage: {props.isaPercentage * 100}% <br/>\n            Minimum salary is ${props.thousandsSeparator(props.minimumSalary)} <br/>\n            Projected Yearly Salary: ${props.thousandsSeparator(props.projectedSalary)} / year <br/> \n            Projected Monthly Salary: ${props.thousandsSeparator(Math.ceil(props.projectedSalary/12))} / month <br/>\n            <button onClick={() => props.changeTerms()}>Change Terms</button> \n        </SContainer>\n    );\n};\n","import React from 'react';\nimport {SContainer} from './ISATerms'\n\nconst ExpectedIncome = props => {\n    return (\n        <SContainer>\n            <h3>Adjusted Income</h3> \n            Take Home Salary after Taxes: ${props.thousandsSeparator(props.projectedSalary - props.totalTaxAmount)} <br/>\n            Monthly Take Home Salary after Taxes: ${props.thousandsSeparator(Math.round((props.projectedSalary - props.totalTaxAmount)/12))} <br/> <br/>\n            Take Home Salary sans State Taxes: ${props.thousandsSeparator(Math.round(props.projectedSalary-(props.fedTaxes+ props.FICATax)))} <br/>\n            Take Home Monthly Salary sans State Taxes: ${props.thousandsSeparator(Math.round((props.projectedSalary-(props.fedTaxes+ props.FICATax))/12))} <br/> <br/>\n            Take Home Salary After ISA and Fed Taxes: ${props.thousandsSeparator(props.projectedSalary - (props.yearlyIsaPayment + props.fedTaxes + props.FICATax))} <br/>\n            Monthly Take Home Salary: ${props.thousandsSeparator(Math.round((props.projectedSalary - (props.yearlyIsaPayment + props.fedTaxes + props.FICATax))/12))} <br/>  <br/>\n            Take Home Salary After ISA and Taxes: ${props.thousandsSeparator(props.projectedSalary - (props.yearlyIsaPayment + props.totalTaxAmount))} <br/>\n            Monthly Take Home Salary: ${props.thousandsSeparator(Math.round((props.projectedSalary - (props.yearlyIsaPayment + props.totalTaxAmount))/12))} <br/> \n        </SContainer>\n    );\n}\n\nexport default ExpectedIncome;","import React from 'react';\nimport Taxee from 'taxee-tax-statistics';\nimport {SContainer} from './ISATerms'\n\n/*\nconst state = props.state || 'california';\nconst maritalStatus = 'single';\n\nconst FICARate = 7.65;\n\nconst stateTaxBrackets = Taxee[2019][state][maritalStatus].income_tax_brackets;\n\nconst fedTaxBrackets = Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.income_tax_brackets;\n\nconst deductions = {\n    state: Taxee[2019][state][maritalStatus].deductions[0].deduction_amount,\n    federal: Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.deductions[0].deduction_amount\n};\nconsole.log(Taxee[2019])\nconst state2 = 'texas';\n// console.log(Taxee[2019][state2])\nconsole.log(fedTaxBrackets)\n\n// need to refine so states with no taxes return none. */\n\n\nconst TaxesInfo = props => {\n\n    const state = props.state || 'california';\n    const maritalStatus = 'single';\n    console.log(state);\n\n    const FICARate = 7.65;\n\n    const stateTaxBrackets = Taxee[2019][state][maritalStatus].income_tax_brackets;\n\n    const fedTaxBrackets = Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.income_tax_brackets;\n\n    const deductions = {\n    state: Taxee[2019][state][maritalStatus].deductions[0].deduction_amount,\n    federal: Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.deductions[0].deduction_amount\n    };\n\n    // State Marginal Tax Amounts\n\n    const stateTaxes1 = (stateTaxBrackets[1].bracket * (stateTaxBrackets[0].marginal_rate / 100))\n\n    const stateTaxes2 = ((stateTaxBrackets[2].bracket - stateTaxBrackets[1].bracket)  * (stateTaxBrackets[1].marginal_rate / 100))\n\n    const stateTaxes3 = ((stateTaxBrackets[3].bracket - stateTaxBrackets[2].bracket)  * (stateTaxBrackets[2].marginal_rate / 100))\n\n    // need to make the calculation based on projSalary. Right now the taxes for > 95k are wrong because tax brackets higher than needed are calculated\n\n\n    const stateTaxes4 = (((props.projectedSalary - deductions.state) - stateTaxBrackets[3].bracket)  *(stateTaxBrackets[3].marginal_rate / 100))\n\n    const stateTaxes = Math.ceil(stateTaxes1 + stateTaxes2+ stateTaxes3 + stateTaxes4)\n\n    // Federal Marginal Tax Amounts\n\n    const fedTaxes1 = (fedTaxBrackets[1].bracket * (fedTaxBrackets[0].marginal_rate / 100))\n\n    const fedTaxes2 = ((fedTaxBrackets[2].bracket - fedTaxBrackets[1].bracket)  * (fedTaxBrackets[1].marginal_rate / 100))\n\n    const fedTaxes3 = ((fedTaxBrackets[3].bracket - fedTaxBrackets[2].bracket)  * (fedTaxBrackets[2].marginal_rate / 100))\n\n    // need to make the calculation based on projSalary. Right now the taxes for > 95k are wrong because tax brackets higher than needed are calculated\n\n    const fedTaxes4 = (((props.projectedSalary - deductions.federal) - fedTaxBrackets[3].bracket) * (fedTaxBrackets[3].marginal_rate / 100))\n\n    const fedTaxes = Math.ceil(fedTaxes1 + fedTaxes2+ fedTaxes3 + fedTaxes4)\n\n    // console.log(fedTaxes1, fedTaxes2, fedTaxes3, fedTaxes4)\n   // console.log(fedTaxBrackets)\n    // console.log(props.projectedSalary-deductions.federal)\n\n    // FICA tax\n\n    const FICATax = props.projectedSalary * (FICARate/100);\n    const totalTaxAmount = stateTaxes + fedTaxes + FICATax\n\n    const effectiveStateTaxRate = (stateTaxes / props.projectedSalary) * 100\n    const effectiveFedTaxRate = (fedTaxes / props.projectedSalary) * 100\n\n    const roundedState = Math.round((effectiveStateTaxRate * 100 ))/100;\n    const roundedFed = Math.round((effectiveFedTaxRate * 100 ))/100; \n\n    return (\n        <SContainer>\n            <h3>Taxes Info</h3>\n            State Taxes Amount: ${props.thousandsSeparator(stateTaxes)} <br/>\n            Federal Taxes Amount: ${props.thousandsSeparator(fedTaxes)} <br/>\n            FICA Tax Amount: ${props.thousandsSeparator(FICATax)} <br/>\n            Total Taxes Amount: ${props.thousandsSeparator(totalTaxAmount)} <br/>\n            Effective State Tax Rate: {roundedState}% <br/>\n            Effective Federal Tax Rate: {roundedFed}% <br/> <br/>\n        </SContainer>\n    );\n};\n\nexport default TaxesInfo;","import React from 'react';\nimport {SContainer} from './ISATerms'\n\nconst ISAPayback = props => {\n\n    let monthlyPayment = Math.ceil(props.yearlyIsaPayment / 12);\n    let totalPayment = monthlyPayment * props.isaTermLength;\n\n    if (totalPayment > props.isaCap) {\n      totalPayment = props.isaCap\n    };\n\n    let paymentMonths = Math.ceil(props.isaCap / monthlyPayment)\n\n    return (\n        <SContainer>\n            <h3>ISA Payback Info</h3>\n            Yearly Payment: ${props.thousandsSeparator(props.yearlyIsaPayment)} <br/>\n            Monthly Payment: ${props.thousandsSeparator(monthlyPayment)} <br/>\n            Total Payment: ${props.thousandsSeparator(totalPayment)} <br/>\n            Months of Payment: { totalPayment === props.isaCap ? paymentMonths : props.isaTermLength}\n      </SContainer>\n    );\n};\n\nexport default ISAPayback;","import React, { Component } from 'react';\nimport {ISATerms} from './components/ISATerms';\nimport ExpectedIncome from './components/ExpectedIncome';\nimport TaxesInfo from './components/TaxesInfo';\nimport styled from 'styled-components';\nimport ISAPayback from './components/ISAPayback';\nimport Taxee from 'taxee-tax-statistics';\nimport './App.css';\n\nconst SContainer = styled.div`{\n  display: flex;\n  justify-content: space-evenly;\n  border: solid blue 2px;\n}`;\n\n const SHeaderCenter = styled.h2`{\n   display: flex;\n   justify-content: center;\n   border: solid green 2px;\n }`;\n\n\nclass App extends Component {\n  state = {\n    minimumSalary: 50000,\n    isaCap: 40000,\n    isaPercentage: .17, // in decimal form\n    isaTermLength: 36, // in months\n    projectedSalary: 95000,\n    currentState: null\n  };\n\n  changeTerms = () => {\n    let projSalary = prompt('What is your expected salary?');\n    let newState = prompt('What state are you in?');\n    let newPerc = prompt('What is your ISA payback percentage?');\n    let newCap = prompt('What is your ISA Cap?');\n    let newTermLen = prompt('What is your ISA term length?');\n    this.setState({\n      projectedSalary: projSalary || this.state.minimumSalary,\n      currentState: newState || 'arizona',\n    });\n    newCap && this.setState({isaCap: newCap});\n    newPerc && this.setState({isaPercentage: newPerc});\n    newTermLen && this.setState({isaTermLength: newTermLen})\n  };\n\n  thousandsSeparator(num) {\n    var num_parts = num.toString().split(\".\");\n    num_parts[0] = num_parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return num_parts.join(\".\");\n  };\n\n\n  render() {\n\n\n  let yearlyPayment = Math.ceil((this.state.projectedSalary || this.state.minimumSalary) * this.state.isaPercentage);\n\n  const state = this.state.currentState || 'arizona';\n  const maritalStatus = 'single';\n\n  const FICARate = 7.65;\n\n  const stateTaxBrackets = Taxee[2019][state][maritalStatus].income_tax_brackets;\n\n  const fedTaxBrackets = Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.income_tax_brackets;\n\n  const deductions = {\n    state: Taxee[2019][state][maritalStatus].deductions[0].deduction_amount,\n    federal: Taxee[2019].federal.tax_withholding_percentage_method_tables.annual.single.deductions[0].deduction_amount\n  };\n\n  const stateTaxes1 = (stateTaxBrackets[1].bracket * (stateTaxBrackets[0].marginal_rate / 100))\n\n  const stateTaxes2 = ((stateTaxBrackets[2].bracket - stateTaxBrackets[1].bracket)  * (stateTaxBrackets[1].marginal_rate / 100))\n\n  const stateTaxes3 = ((stateTaxBrackets[3].bracket - stateTaxBrackets[2].bracket)  * (stateTaxBrackets[2].marginal_rate / 100))\n\n  // need to make the calculation based on projSalary. Right now the taxes for > 95k are wrong because tax brackets higher than needed are calculated\n\n\n  const stateTaxes4 = (((this.state.projectedSalary - deductions.state) - stateTaxBrackets[3].bracket)  *(stateTaxBrackets[3].marginal_rate / 100))\n\n  const stateTaxes = Math.ceil(stateTaxes1 + stateTaxes2+ stateTaxes3 + stateTaxes4)\n\n  // Federal Marginal Tax Amounts\n\n  const fedTaxes1 = (fedTaxBrackets[1].bracket * (fedTaxBrackets[0].marginal_rate / 100))\n\n  const fedTaxes2 = ((fedTaxBrackets[2].bracket - fedTaxBrackets[1].bracket)  * (fedTaxBrackets[1].marginal_rate / 100))\n\n  const fedTaxes3 = ((fedTaxBrackets[3].bracket - fedTaxBrackets[2].bracket)  * (fedTaxBrackets[2].marginal_rate / 100))\n\n  // need to make the calculation based on projSalary. Right now the taxes for > 95k are wrong because tax brackets higher than needed are calculated\n\n  const fedTaxes4 = (((this.state.projectedSalary - deductions.federal) - fedTaxBrackets[3].bracket) * (fedTaxBrackets[3].marginal_rate / 100))\n\n  const fedTaxes = Math.ceil(fedTaxes1 + fedTaxes2+ fedTaxes3 + fedTaxes4)\n\n  // FICA tax\n\n  const FICATax = this.state.projectedSalary * (FICARate/100);\n  const totalTaxAmount = stateTaxes + fedTaxes + FICATax\n\n  // const effectiveStateTaxRate = (stateTaxes / this.state.projectedSalary) * 100\n  // const effectiveFedTaxRate = (fedTaxes / this.state.projectedSalary) * 100\n\n  // const roundedState = Math.round((effectiveStateTaxRate * 100 ))/100;\n  //  const roundedFed = Math.round((effectiveFedTaxRate * 100 ))/100;\n\n    return (\n      <div>\n        <SHeaderCenter>Income Calculations</SHeaderCenter>\n        <SContainer>\n          <ISATerms \n            isaTermLength={this.state.isaTermLength} \n            thousandsSeparator={this.thousandsSeparator}\n            isaCap={this.state.isaCap}\n            isaPercentage={this.state.isaPercentage}\n            minimumSalary={this.state.minimumSalary}\n            projectedSalary={this.state.projectedSalary}\n            changeTerms={this.changeTerms}\n          />\n          <ISAPayback\n            isaTermLength={this.state.isaTermLength} \n            thousandsSeparator={this.thousandsSeparator}\n            isaCap={this.state.isaCap}\n            isaPercentage={this.state.isaPercentage}\n            minimumSalary={this.state.minimumSalary}\n            projectedSalary={this.state.projectedSalary}\n            yearlyIsaPayment={yearlyPayment}\n          />\n          <TaxesInfo \n            projectedSalary={this.state.projectedSalary}\n            thousandsSeparator={this.thousandsSeparator}\n            yearlyIsaPayment={yearlyPayment}\n            state={this.state.currentState}\n          />\n          <ExpectedIncome\n            thousandsSeparator={this.thousandsSeparator}\n            projectedSalary={this.state.projectedSalary}\n            yearlyIsaPayment={yearlyPayment}\n            totalTaxAmount={totalTaxAmount}\n            fedTaxes={fedTaxes}\n            FICATax={FICATax}\n//\n          />\n        </SContainer>\n      </div>\n    );\n  };\n};\n\nexport default App;\n\n/* imports already available: \n\n-- axios \n-- react-dom \n-- react-router-dom for { Route, BrowserRouter, Link } \n-- styled-components for styled\n\n\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />, \ndocument.getElementById('root'));\n"],"sourceRoot":""}